<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN//EN" "http://www.springframework.org/dtd/spring-beans.dtd">

<beans>

    <!-- quartz任务调度器， 如果将lazy-init='false'那么容器启动就会执行调度程序  -->
    <!--<bean id="crmScheduler" lazy-init="false" autowire="no" class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
        <property name="triggers">
            <list>
                 <ref bean="extractUserMemberCronTrigger"/>
                 <ref bean="extractSuperOrderCronTrigger"/>
                 <ref bean="extractVstOrderCronTrigger"/>
                 <ref bean="extractCsVipOrderCronTrigger"/>
                 <ref bean="extractRefundmentCronTrigger"/>
                 <ref bean="computeMemberGradeAndGrowthValueCronTrigger"/>
                 <ref bean="vipOperateInsideLetterCronTrigger"/>
                 <ref bean="handleCsVipOrderAndComputeCsVipGradeCronTrigger"/>
                 <ref bean="syncCsVipStaffRelationInfoToLvccTaskCronTrigger"/>
            </list>
        </property>
    </bean>-->

 
 
    <!-- ===========================testQuartz定时器  Start============================= -->
    <!-- 定时器主体类 -->
    <bean id="testQuartzTask" class="com.lvmama.crm.timetask.TestQuartzTask"></bean>
    <!-- 定义调用对象和调用对象的方法，即定时器任务 -->
    <bean id="testQuartzJobDetail" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
        <property name="targetObject" ref="testQuartzTask"/>
        <property name="targetMethod" value="run"/>
        <property name="concurrent" value="false"/><!-- 该属性很重要：对同一个jobDetail,上一次job还未执行完，下一次job触发时间到了的情况，concurrent（默认值为true）设为false，则下一次job会被延迟，直到上一次结束后才开启 -->
    </bean>
    <!-- 定义定时器触发器 -->
    <bean id="testQuartzCronTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean">
        <property name="jobDetail" ref="testQuartzJobDetail"/>
        <property name="cronExpression" value="0/5 * * * * ?"/><!-- 每5秒钟执行一次 -->
        <property name="startDelay" value="10000" /><!-- 延迟10秒钟执行 -->
    </bean>
    <!-- ===========================testQuartz定时器  End============================= -->
 
 
    <!-- ===========================ExtractUserMember定时器  Start============================= -->
    <!-- 定时器主体类-->
    <bean id="extractUserMemberTask" class="com.lvmama.crm.timetask.ExtractUserMemberTask"></bean>
    <!-- 定义调用对象和调用对象的方法，即定时器任务 -->
    <bean id="extractUserMemberJobDetail" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
        <property name="targetObject" ref="extractUserMemberTask"/>
        <property name="targetMethod" value="run"/>
        <property name="concurrent" value="false"/><!-- 该属性很重要：对同一个jobDetail,上一次job还未执行完，下一次job触发时间到了的情况，concurrent（默认值为true）设为false，则下一次job会被延迟，直到上一次结束后才开启 -->
    </bean>
    <!-- 定义定时器触发器 -->
    <bean id="extractUserMemberCronTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean">
        <property name="jobDetail" ref="extractUserMemberJobDetail"/>
        <property name="cronExpression" value="0 0 20 * * ?"/><!-- 每5秒钟执行一次 -->
        <property name="startDelay" value="10000" /><!-- 延迟10秒钟执行 -->
    </bean>
    <!-- ===========================ExtractUserMember定时器  End============================= -->
 
     <!-- ===========================extractSuperOrder定时器  Start============================= -->
    <!-- 定时器主体类 -->
    <bean id="extractSuperOrderTask" class="com.lvmama.crm.timetask.ExtractSuperOrderTask"></bean>
    <!-- 定义调用对象和调用对象的方法，即定时器任务 -->
    <bean id="extractSuperOrderJobDetail" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
        <property name="targetObject" ref="extractSuperOrderTask"/>
        <property name="targetMethod" value="run"/>
        <property name="concurrent" value="false"/><!-- 该属性很重要：对同一个jobDetail,上一次job还未执行完，下一次job触发时间到了的情况，concurrent（默认值为true）设为false，则下一次job会被延迟，直到上一次结束后才开启 -->
    </bean>
    <!-- 定义定时器触发器 -->
    <bean id="extractSuperOrderCronTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean">
        <property name="jobDetail" ref="extractSuperOrderJobDetail"/>
        <property name="cronExpression" value="0 0 20 * * ?"/><!-- 每5秒钟执行一次 -->
        <property name="startDelay" value="10000" /><!-- 延迟10秒钟执行 -->
    </bean>
    <!-- ===========================extractSuperOrder定时器  End============================= -->
 
      <!-- ===========================extractVstOrder定时器  Start============================= -->
    <!-- 定时器主体类 -->
    <bean id="extractVstOrderTask" class="com.lvmama.crm.timetask.ExtractVstOrderTask"></bean>
    <!-- 定义调用对象和调用对象的方法，即定时器任务 -->
    <bean id="extractVstOrderJobDetail" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
        <property name="targetObject" ref="extractVstOrderTask"/>
        <property name="targetMethod" value="run"/>
        <property name="concurrent" value="false"/><!-- 该属性很重要：对同一个jobDetail,上一次job还未执行完，下一次job触发时间到了的情况，concurrent（默认值为true）设为false，则下一次job会被延迟，直到上一次结束后才开启 -->
    </bean>
    <!-- 定义定时器触发器 -->
    <bean id="extractVstOrderCronTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean">
        <property name="jobDetail" ref="extractVstOrderJobDetail"/>
        <property name="cronExpression" value="0 0 20 * * ?"/><!-- 每5秒钟执行一次 -->
        <property name="startDelay" value="10000" /><!-- 延迟10秒钟执行 -->
    </bean>
    <!-- ===========================extractVstOrder定时器  End============================= -->

    <!-- ===========================extractCsVipOrder定时器  Start============================= -->
    <!-- 定时器主体类 -->
    <bean id="extractCsVipOrderTask" class="com.lvmama.crm.timetask.ExtractCsVipOrderTask"></bean>
    <!-- 定义调用对象和调用对象的方法，即定时器任务 -->
    <bean id="extractCsVipOrderJobDetail" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
        <property name="targetObject" ref="extractCsVipOrderTask"/>
        <property name="targetMethod" value="run"/>
        <property name="concurrent" value="false"/><!-- 该属性很重要：对同一个jobDetail,上一次job还未执行完，下一次job触发时间到了的情况，concurrent（默认值为true）设为false，则下一次job会被延迟，直到上一次结束后才开启 -->
    </bean>
    <!-- 定义定时器触发器 -->
    <bean id="extractCsVipOrderCronTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean">
        <property name="jobDetail" ref="extractCsVipOrderJobDetail"/>
        <property name="cronExpression" value="0 0 20 * * ?"/><!-- 每5秒钟执行一次 -->
        <property name="startDelay" value="10000" /><!-- 延迟10秒钟执行 -->
    </bean>
    <!-- ===========================extractCsVipOrder定时器  End============================= -->



    <!-- ===========================extractRefundment定时器  Start============================= -->
    <!-- 定时器主体类 -->
    <bean id="extractRefundmentTask" class="com.lvmama.crm.timetask.ExtractRefundmentTask"></bean>
    <!-- 定义调用对象和调用对象的方法，即定时器任务 -->
    <bean id="extractRefundmentJobDetail" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
        <property name="targetObject" ref="extractRefundmentTask"/>
        <property name="targetMethod" value="run"/>
        <property name="concurrent" value="false"/><!-- 该属性很重要：对同一个jobDetail,上一次job还未执行完，下一次job触发时间到了的情况，concurrent（默认值为true）设为false，则下一次job会被延迟，直到上一次结束后才开启 -->
    </bean>
    <!-- 定义定时器触发器 -->
    <bean id="extractRefundmentCronTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean">
        <property name="jobDetail" ref="extractRefundmentJobDetail"/>
        <property name="cronExpression" value="0 0 20 * * ?"/><!-- 每5秒钟执行一次 -->
        <property name="startDelay" value="10000" /><!-- 延迟10秒钟执行 -->
    </bean>
    <!-- ===========================extractRefundmentOrder定时器  End============================= -->
 
 
    <!-- ===========================ComputeMemberGradeAndGrowthValueTask定时器  Start============================= -->
    <!-- 定时器主体类 -->
    <bean id="computeMemberGradeAndGrowthValueTask" class="com.lvmama.crm.timetask.ComputeMemberGradeAndGrowthValueTask"></bean>
    <!-- 定义调用对象和调用对象的方法，即定时器任务 -->
    <bean id="computeMemberGradeAndGrowthValueJobDetail" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
        <property name="targetObject" ref="computeMemberGradeAndGrowthValueTask"/>
        <property name="targetMethod" value="run"/>
        <property name="concurrent" value="false"/><!-- 该属性很重要：对同一个jobDetail,上一次job还未执行完，下一次job触发时间到了的情况，concurrent（默认值为true）设为false，则下一次job会被延迟，直到上一次结束后才开启 -->
    </bean>
    <!-- 定义定时器触发器 -->
    <bean id="computeMemberGradeAndGrowthValueCronTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean">
        <property name="jobDetail" ref="computeMemberGradeAndGrowthValueJobDetail"/>
        <property name="cronExpression" value="0 0 0 * * ?"/><!-- 每天凌晨3点执行一次 -->
        <property name="startDelay" value="10000" /><!-- 延迟10秒钟执行 -->
    </bean>
    <!-- ===========================ComputeMemberGradeAndGrowthValueTask定时器  End============================= -->


    <!-- ===========================VipOperateInsideLetterTask定时器  Start============================= -->
    <!-- 定时器主体类 -->
    <bean id="vipOperateInsideLetterTask" class="com.lvmama.crm.timetask.VipOperateInsideLetterTask"></bean>
    <!-- 定义调用对象和调用对象的方法，即定时器任务 -->
    <bean id="vipOperateInsideLetterJobDetail" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
        <property name="targetObject" ref="vipOperateInsideLetterTask"/>
        <property name="targetMethod" value="run"/>
        <property name="concurrent" value="false"/><!-- 该属性很重要：对同一个jobDetail,上一次job还未执行完，下一次job触发时间到了的情况，concurrent（默认值为true）设为false，则下一次job会被延迟，直到上一次结束后才开启 -->
    </bean>
    <!-- 定义定时器触发器 -->
    <bean id="vipOperateInsideLetterCronTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean">
        <property name="jobDetail" ref="vipOperateInsideLetterJobDetail"/>
        <property name="cronExpression" value="0 0 0/1 * * ?"/><!-- 每隔一个小时跑一次 -->
        <property name="startDelay" value="10000" /><!-- 延迟10秒钟执行 -->
    </bean>
    <!-- ===========================VipOperateInsideLetterTask定时器  End============================= -->
    
    
    <!-- ===========================ExtractVipApplicationAutoRejectTask定时器  Start============================= -->
    <!-- 定时器主体类 -->
    <bean id="extractVipApplicationAutoRejectTask" class="com.lvmama.crm.timetask.ExtractVipApplicationAutoRejectTask"></bean>
    <!-- 定义调用对象和调用对象的方法，即定时器任务 -->
    <bean id="extractVipApplicationAutoRejectJobDetail" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
        <property name="targetObject" ref="extractVipApplicationAutoRejectTask"/>
        <property name="targetMethod" value="run"/>
        <property name="concurrent" value="false"/><!-- 该属性很重要：对同一个jobDetail,上一次job还未执行完，下一次job触发时间到了的情况，concurrent（默认值为true）设为false，则下一次job会被延迟，直到上一次结束后才开启 -->
    </bean>
    <!-- 定义定时器触发器 -->
    <bean id="extractVipApplicationAutoRejectCronTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean">
        <property name="jobDetail" ref="extractVipApplicationAutoRejectJobDetail"/>
        <property name="cronExpression" value="0 0 0 * * ?"/><!-- 每天凌晨3点执行一次 -->
        <property name="startDelay" value="10000" /><!-- 延迟10秒钟执行 -->
    </bean>
    
     <!--=======================================GradeChangeSendMailTask定时器Start============================================-->
    <!-- 定时器主体类 -->
    <bean id="gradeChangeSendMailTask" class="com.lvmama.crm.timetask.GradeChangeSendMailTask"></bean>
    <!-- 定义调用对象和调用对象的方法，即定时器任务 -->
    <bean id="gradeChangeSendMailJobDetail" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
    	<property name="targetObject" ref="gradeChangeSendMailTask"></property>
    	<property name="targetMethod" value="run"/>
        <property name="concurrent" value="false"/><!-- 该属性很重要：对同一个jobDetail,上一次job还未执行完，下一次job触发时间到了的情况，concurrent（默认值为true）设为false，则下一次job会被延迟，直到上一次结束后才开启 -->
    </bean>
      <!-- 定义定时器触发器 -->
    <bean id="gradeChangeSendMailCronTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean">
        <property name="jobDetail" ref="gradeChangeSendMailJobDetail"/>
        <property name="cronExpression" value="* * * * * ?"/><!-- 格式为秒 分 时 日 月 周  年 -->
        <property name="startDelay" value="10000" /><!-- 延迟10秒钟执行 -->
    </bean>
    <!-- ===========================GradeChangeSendMailTask定时器  End============================= -->

    <!--=======================================HandleCsVipOrderAndComputeCsVipGradeTask定时器Start============================================-->
    <!-- 定时器主体类 -->
    <bean id="handleCsVipOrderAndComputeCsVipGradeTask" class="com.lvmama.crm.timetask.HandleCsVipOrderAndComputeCsVipGrade"></bean>
    <!-- 定义调用对象和调用对象的方法，即定时器任务 -->
    <bean id="handleCsVipOrderAndComputeCsVipGradeJobDetail" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
        <property name="targetObject" ref="handleCsVipOrderAndComputeCsVipGradeTask"></property>
        <property name="targetMethod" value="run"/>
        <property name="concurrent" value="false"/><!-- 该属性很重要：对同一个jobDetail,上一次job还未执行完，下一次job触发时间到了的情况，concurrent（默认值为true）设为false，则下一次job会被延迟，直到上一次结束后才开启 -->
    </bean>
    <!-- 定义定时器触发器 -->
    <bean id="handleCsVipOrderAndComputeCsVipGradeCronTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean">
        <property name="jobDetail" ref="handleCsVipOrderAndComputeCsVipGradeJobDetail"/>
        <property name="cronExpression" value="0/5 * * * * ?"/><!-- 格式为秒 分 时 日 月 周  年 -->
        <property name="startDelay" value="10000" /><!-- 延迟10秒钟执行 -->
    </bean>
    <!-- ===========================HandleCsVipOrderAndComputeCsVipGradeTask定时器  End============================= -->

    <!--=======================================CsVipAutoRejectComplainApplicationTask 定时器  Start============================================-->
    <!-- 定时器主体类 -->
    <bean id="csVipAutoRejectComplainApplicationTask" class="com.lvmama.crm.timetask.CsVipAutoRejectComplainApplicationTask"></bean>
    <!-- 定义调用对象和调用对象的方法，即定时器任务 -->
    <bean id="csVipAutoRejectComplainApplicationTaskJobDetail" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
        <property name="targetObject" ref="csVipAutoRejectComplainApplicationTask"></property>
        <property name="targetMethod" value="run"/>
        <property name="concurrent" value="false"/><!-- 该属性很重要：对同一个jobDetail,上一次job还未执行完，下一次job触发时间到了的情况，concurrent（默认值为true）设为false，则下一次job会被延迟，直到上一次结束后才开启 -->
    </bean>
    <!-- 定义定时器触发器 -->
    <bean id="csVipAutoRejectComplainApplicationTaskCronTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean">
        <property name="jobDetail" ref="csVipAutoRejectComplainApplicationTaskJobDetail"/>
        <property name="cronExpression" value="0/5 * * * * ?"/><!-- 格式为秒 分 时 日 月 周  年 -->
        <property name="startDelay" value="10000" /><!-- 延迟10秒钟执行 -->
    </bean>
    <!-- ===========================CsVipAutoRejectComplainApplicationTask 定时器  End============================= -->

 
    <!--=======================================UpModelJobTrackerTask 定时器  Start============================================-->
    <!-- 定时器主体类 -->
    <bean id="upModelJobTrackerTask" class="com.lvmama.crm.timetask.UpModelJobTrackerTask"></bean>
    <!-- 定义调用对象和调用对象的方法，即定时器任务 -->
    <bean id="upModelJobTrackerTaskJobDetail" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
        <property name="targetObject" ref="upModelJobTrackerTask"></property>
        <property name="targetMethod" value="run"/>
        <property name="concurrent" value="false"/><!-- 该属性很重要：对同一个jobDetail,上一次job还未执行完，下一次job触发时间到了的情况，concurrent（默认值为true）设为false，则下一次job会被延迟，直到上一次结束后才开启 -->
    </bean>
    <!-- 定义定时器触发器 -->
    <bean id="upModelJobTrackerTaskCronTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean">
        <property name="jobDetail" ref="upModelJobTrackerTaskJobDetail"/>
        <property name="cronExpression" value="0/5 * * * * ?"/><!-- 格式为秒 分 时 日 月 周  年 -->
        <property name="startDelay" value="10000" /><!-- 延迟10秒钟执行 -->
    </bean>
    <!-- ===========================UpModelJobTrackerTask 定时器  End============================= -->


    <!--=======================================SyncCsVipStaffRelationInfoToLvccTask 定时器  Start============================================-->
    <!-- 定时器主体类 -->
    <bean id="syncCsVipStaffRelationInfoToLvccTask" class="com.lvmama.crm.timetask.SyncCsVipStaffRelationInfoToLvccTask"></bean>
    <!-- 定义调用对象和调用对象的方法，即定时器任务 -->
    <bean id="syncCsVipStaffRelationInfoToLvccTaskJobDetail" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
        <property name="targetObject" ref="syncCsVipStaffRelationInfoToLvccTask"></property>
        <property name="targetMethod" value="run"/>
        <property name="concurrent" value="false"/><!-- 该属性很重要：对同一个jobDetail,上一次job还未执行完，下一次job触发时间到了的情况，concurrent（默认值为true）设为false，则下一次job会被延迟，直到上一次结束后才开启 -->
    </bean>
    <!-- 定义定时器触发器 -->
    <bean id="syncCsVipStaffRelationInfoToLvccTaskCronTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean">
        <property name="jobDetail" ref="syncCsVipStaffRelationInfoToLvccTaskJobDetail"/>
        <property name="cronExpression" value="0/5 * * * * ?"/><!-- 格式为秒 分 时 日 月 周  年 -->
        <property name="startDelay" value="10000" /><!-- 延迟10秒钟执行 -->
    </bean>
    <!-- ===========================SyncCsVipStaffRelationInfoToLvccTask 定时器  End============================= -->
</beans>